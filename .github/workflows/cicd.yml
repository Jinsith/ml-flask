name: CI/CD Pipeline

on:
  push:
    branches: [ mlops ]
  pull_request:
    branches: [ mlops ]

jobs:
  build-test-train-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Train model
      run: python train.py

    - name: Upload trained model
      uses: actions/upload-artifact@v2
      with:
        name: trained-model
        path: house_price_model.joblib

    - name: Install PythonAnywhere CLI
      run: pip install pythonanywhere

    - name: Deploy to PythonAnywhere
      if: github.event_name == 'push' && github.ref == 'refs/heads/mlops'
      env:
        PA_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
        PA_USER: ${{ secrets.PYTHONANYWHERE_USERNAME }}
        WORKON_HOME: ${{ runner.temp }}/virtualenvs
      run: |
        echo "Checking PythonAnywhere API token..."
        if [ -z "$PA_TOKEN" ]; then
          echo "PythonAnywhere API token is not set!"
          exit 1
        else
          echo "PythonAnywhere API token is set (value hidden for security)"
        fi
        
        echo "Creating WORKON_HOME directory..."
        mkdir -p $WORKON_HOME
        
        echo "Deploying to PythonAnywhere..."
        pip install pythonanywhere
        pa_autoconfigure_django.py --python=3.8 --nuke https://github.com/${{ github.repository }}
        
        echo "Updating WSGI file for Flask..."
        cat > /var/www/$PA_USER.pythonanywhere.com_wsgi.py << EOL
        import sys
        path = '/home/$PA_USER/mysite'
        if path not in sys.path:
            sys.path.append(path)
        from app import app as application
        EOL
        
        echo "Reloading PythonAnywhere web app..."
        pa_reload_webapp.py $PA_USER.pythonanywhere.com

    - name: Notify on failure
      if: failure()
      run: |
        echo "The workflow has failed. Please check the logs for more information."

    - name: Notify on success
      if: success()
      run: |
        echo "The workflow has completed successfully! Application deployed to PythonAnywhere."

