name: CI/CD Pipeline

on:
  push:
    branches: [ mlops ]
  pull_request:
    branches: [ mlops ]

jobs:
  build-test-train-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pythonanywhere

    - name: List project structure
      run: |
        pwd
        ls -R

    - name: Run tests
      run: |
        pytest -v
      continue-on-error: true

    - name: Train model
      run: python train.py

    - name: Upload trained model
      uses: actions/upload-artifact@v2
      with:
        name: trained-model
        path: house_price_model.joblib

    - name: Deploy to PythonAnywhere
      if: github.event_name == 'push' && github.ref == 'refs/heads/mlops'
      env:
        PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_TOKEN }}
        PA_USER: your_pythonanywhere_username  # Replace with your actual username
        WORKON_HOME: ${{ runner.temp }}/virtualenvs
      run: |
        mkdir -p $WORKON_HOME
        echo "Checking API token..."
        if [ -z "$PYTHONANYWHERE_API_TOKEN" ]; then
          echo "API token is not set!"
          exit 1
        else
          echo "API token is set (value hidden for security)"
        fi
        echo "Attempting to use PythonAnywhere API..."
        python -c "
import os
import pythonanywhere
client = pythonanywhere.Client(os.environ['PYTHONANYWHERE_API_TOKEN'])
print(client.get_user_info())
"
        echo "Deploying to PythonAnywhere..."
        pa_autoconfigure_django.py --python=3.8 --nuke https://github.com/${{ github.repository }}

    - name: Notify on failure
      if: failure()
      run: |
        echo "The workflow has failed. Please check the logs for more information."

    - name: Notify on success
      if: success()
      run: |
        echo "The workflow has completed successfully!"

